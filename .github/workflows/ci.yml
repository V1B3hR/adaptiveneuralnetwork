name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black mypy
        
    - name: Lint with ruff
      run: ruff check adaptiveneuralnetwork/
      
    - name: Check formatting with black
      run: black --check adaptiveneuralnetwork/

  type-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Type check with mypy
      run: mypy adaptiveneuralnetwork/core/ adaptiveneuralnetwork/api/

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Cache dataset
      uses: actions/cache@v3
      with:
        path: ./data
        key: mnist-dataset-${{ hashFiles('**/datasets.py') }}
        restore-keys: |
          mnist-dataset-
          
    - name: Run unit tests
      run: pytest adaptiveneuralnetwork/tests/ -v --tb=short -m "not slow"
      
    - name: Run quick integration test
      run: python -c "
        import sys
        sys.path.append('.')
        from adaptiveneuralnetwork.benchmarks.vision.mnist import quick_mnist_test
        result = quick_mnist_test(num_epochs=1, subset_size=500)
        print('Quick test completed successfully!')
        print(f'Final accuracy: {result[\"final_metrics\"].get(\"val_accuracy\", \"N/A\"):.2f}%')
        "
      timeout-minutes: 10

  benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Cache dataset
      uses: actions/cache@v3
      with:
        path: ./data
        key: mnist-dataset-${{ hashFiles('**/datasets.py') }}
        restore-keys: |
          mnist-dataset-
          
    - name: Run benchmark
      run: python scripts/run_benchmark.py --epochs 2 --subset-size 2000 --quick-test
      timeout-minutes: 15
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: |
          *.json
          profiling_results/
          checkpoints/
        retention-days: 30