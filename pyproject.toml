[build-system]
requires = ["setuptools>=45", "wheel", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "adaptiveneuralnetwork"
version = "0.1.0"
description = "Biologically inspired adaptive neural network with vectorized training"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Adaptive Neural Network Contributors"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "torch>=2.0.0,<3.0.0",
    "torchvision>=0.15.0,<1.0.0",
    "numpy>=1.24.0,<2.0.0",
    "rich>=13.0.0",
    "typing-extensions>=4.8.0",
    "pyyaml>=6.0,<7.0",
    "scipy>=1.10.0,<2.0.0",
]

[project.optional-dependencies]
jax = [
    "jax>=0.4.0",
    "jaxlib>=0.4.0", 
    "flax>=0.6.0",
    "optax>=0.1.0",
]
neuromorphic = [
    "scipy>=1.7.0",
    "matplotlib>=3.3.0",
]
multimodal = [
    "transformers>=4.20.0",
    "tokenizers>=0.13.0",
]
nlp = [
    "pandas>=1.5.0",
    "scikit-learn>=1.2.0",
    "tqdm>=4.64.0",
    "kagglehub>=0.2.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0", 
    "mypy>=1.0.0",
    "black>=23.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.19.0",
]
pos = [
    "seqeval>=1.2.2",
    "scikit-learn>=1.2.0",
]

[project.urls]
Homepage = "https://github.com/V1B3hR/adaptiveneuralnetwork"
Repository = "https://github.com/V1B3hR/adaptiveneuralnetwork"
Issues = "https://github.com/V1B3hR/adaptiveneuralnetwork/issues"

[project.scripts]
adaptive-benchmark = "adaptiveneuralnetwork.scripts.run_benchmark:main"
adaptive-profile = "adaptiveneuralnetwork.scripts.run_profiler:main"

[tool.setuptools.packages.find]
include = ["adaptiveneuralnetwork*"]

[tool.pytest.ini_options]
testpaths = ["adaptiveneuralnetwork/tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"adaptiveneuralnetwork/tests/*" = ["F401", "F811"]  # test files can have unused imports

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*", 
    "numpy.*",
    "matplotlib.*",
    "scipy.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 100
target-version = ["py310"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.coverage.run]
source = ["adaptiveneuralnetwork"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]